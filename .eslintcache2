[{"C:\\sjs\\webstacker\\cica-web\\app.js":"1","C:\\sjs\\webstacker\\cica-web\\index\\routes.js":"2","C:\\sjs\\webstacker\\cica-web\\jest.config.js":"3","C:\\sjs\\webstacker\\cica-web\\jest.config.jsdom.js":"4","C:\\sjs\\webstacker\\cica-web\\jest.setup.js":"5","C:\\sjs\\webstacker\\cica-web\\public\\html5-shiv\\html5shiv.js":"6","C:\\sjs\\webstacker\\cica-web\\questionnaire\\form-helper.js":"7","C:\\sjs\\webstacker\\cica-web\\questionnaire\\questionnaire-service.js":"8","C:\\sjs\\webstacker\\cica-web\\questionnaire\\questionnaireUISchema.js":"9","C:\\sjs\\webstacker\\cica-web\\questionnaire\\request-service.js":"10","C:\\sjs\\webstacker\\cica-web\\questionnaire\\routes.js":"11","C:\\sjs\\webstacker\\cica-web\\src\\js\\scripts.js":"12","C:\\sjs\\webstacker\\cica-web\\src\\modules\\autocomplete\\autocomplete.js":"13","C:\\sjs\\webstacker\\cica-web\\src\\modules\\autocomplete\\autocomplete.test.jsdom.js":"14","C:\\sjs\\webstacker\\cica-web\\src\\modules\\autocomplete\\vendor\\autocomplete.min.js":"15","C:\\sjs\\webstacker\\cica-web\\src\\modules\\ga\\index.js":"16","C:\\sjs\\webstacker\\cica-web\\src\\modules\\ga\\vendor\\gua-anchor.js":"17","C:\\sjs\\webstacker\\cica-web\\test\\form-helper.test.js":"18","C:\\sjs\\webstacker\\cica-web\\test\\questionnaire-service.test.js":"19","C:\\sjs\\webstacker\\cica-web\\test\\request-service.test.js":"20","C:\\sjs\\webstacker\\cica-web\\test\\routes.test.js":"21","C:\\sjs\\webstacker\\cica-web\\test\\test-fixtures\\schemas\\p-applicant-enter-your-name.js":"22","C:\\sjs\\webstacker\\cica-web\\test\\test-fixtures\\transformations\\p-applicant-british-citizen-or-eu-national.js":"23","C:\\sjs\\webstacker\\cica-web\\test\\test-fixtures\\transformations\\resolved html\\p-applicant-british-citizen-or-eu-national.js":"24","C:\\sjs\\webstacker\\cica-web\\test\\test-fixtures\\transformations\\resolved html\\p-some-section.js":"25","C:\\sjs\\webstacker\\cica-web\\webpack.config.js":"26","C:\\sjs\\webstacker\\cica-web\\webpack.config.prod.js":"27"},{"size":5160,"mtime":1584552734923,"results":"28","hashOfConfig":"29"},{"size":766,"mtime":1584552734933,"results":"30","hashOfConfig":"29"},{"size":368,"mtime":1584664379551,"results":"31","hashOfConfig":"29"},{"size":109,"mtime":1584664298726,"results":"32","hashOfConfig":"29"},{"size":240,"mtime":1584552734942,"results":"33","hashOfConfig":"29"},{"size":2755,"mtime":1584552734973,"results":"34","hashOfConfig":"29"},{"size":9814,"mtime":1584552734980,"results":"35","hashOfConfig":"29"},{"size":5552,"mtime":1584552734983,"results":"36","hashOfConfig":"29"},{"size":26683,"mtime":1584552734986,"results":"37","hashOfConfig":"29"},{"size":1018,"mtime":1584552734989,"results":"38","hashOfConfig":"29"},{"size":5548,"mtime":1584552734991,"results":"39","hashOfConfig":"29"},{"size":311,"mtime":1584552734997,"results":"40","hashOfConfig":"41"},{"size":4156,"mtime":1584552735001,"results":"42","hashOfConfig":"41"},{"size":3164,"mtime":1584552735007,"results":"43","hashOfConfig":"41"},{"size":34615,"mtime":1584552735010,"results":"44","hashOfConfig":"41"},{"size":4866,"mtime":1584552735015,"results":"45","hashOfConfig":"41"},{"size":4875,"mtime":1584552735019,"results":"46","hashOfConfig":"41"},{"size":24572,"mtime":1584552735024,"results":"47","hashOfConfig":"29"},{"size":8760,"mtime":1584552735027,"results":"48","hashOfConfig":"29"},{"size":2133,"mtime":1584552735030,"results":"49","hashOfConfig":"29"},{"size":56494,"mtime":1584552735032,"results":"50","hashOfConfig":"29"},{"size":1348,"mtime":1584552735045,"results":"51","hashOfConfig":"29"},{"size":924,"mtime":1584552735048,"results":"52","hashOfConfig":"29"},{"size":10656,"mtime":1584552735051,"results":"53","hashOfConfig":"29"},{"size":8838,"mtime":1584552735062,"results":"54","hashOfConfig":"29"},{"size":1484,"mtime":1584552735066,"results":"55","hashOfConfig":"29"},{"size":116,"mtime":1584552735069,"results":"56","hashOfConfig":"29"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11vqwqw",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"nt1vdu",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\sjs\\webstacker\\cica-web\\app.js",[],"C:\\sjs\\webstacker\\cica-web\\index\\routes.js",[],"C:\\sjs\\webstacker\\cica-web\\jest.config.js",[],"C:\\sjs\\webstacker\\cica-web\\jest.config.jsdom.js",[],"C:\\sjs\\webstacker\\cica-web\\jest.setup.js",[],"C:\\sjs\\webstacker\\cica-web\\public\\html5-shiv\\html5shiv.js",[],"C:\\sjs\\webstacker\\cica-web\\questionnaire\\form-helper.js",[],"C:\\sjs\\webstacker\\cica-web\\questionnaire\\questionnaire-service.js",[],"C:\\sjs\\webstacker\\cica-web\\questionnaire\\questionnaireUISchema.js",[],"C:\\sjs\\webstacker\\cica-web\\questionnaire\\request-service.js",[],"C:\\sjs\\webstacker\\cica-web\\questionnaire\\routes.js",[],"C:\\sjs\\webstacker\\cica-web\\src\\js\\scripts.js",[],"C:\\sjs\\webstacker\\cica-web\\src\\modules\\autocomplete\\autocomplete.js",[],"C:\\sjs\\webstacker\\cica-web\\src\\modules\\autocomplete\\autocomplete.test.jsdom.js",[],"C:\\sjs\\webstacker\\cica-web\\src\\modules\\autocomplete\\vendor\\autocomplete.min.js",[],"C:\\sjs\\webstacker\\cica-web\\src\\modules\\ga\\index.js",[],"C:\\sjs\\webstacker\\cica-web\\src\\modules\\ga\\vendor\\gua-anchor.js",[],"C:\\sjs\\webstacker\\cica-web\\test\\form-helper.test.js",[],"C:\\sjs\\webstacker\\cica-web\\test\\questionnaire-service.test.js",["112"],"'use strict';\r\n\r\nconst createQuestionnaire = require('./test-fixtures/res/get_questionnaire.json');\r\nconst getValidSection = require('./test-fixtures/res/get_schema_valid');\r\nconst getValidPreviousSection = require('./test-fixtures/res/get_previous_valid_sectionId');\r\nconst getValidSubmission = require('./test-fixtures/res/get_submission_not_started');\r\nconst getValidCompletedSubmission = require('./test-fixtures/res/get_submission_valid');\r\nconst postValidSubmission = require('./test-fixtures/res/post_valid_submission');\r\n\r\nconst validPostResponse = {valid: true};\r\n\r\ndescribe('Questionnaire service', () => {\r\n    describe('createQuestionnaire', () => {\r\n        it('Should create a new questionnaire', async () => {\r\n            jest.doMock('../questionnaire/request-service', () =>\r\n                jest.fn(() => ({\r\n                    post: () => createQuestionnaire\r\n                }))\r\n            );\r\n            jest.resetModules();\r\n            // eslint-disable-next-line global-require\r\n            const questionnaireService = require('../questionnaire/questionnaire-service')();\r\n            const response = await questionnaireService.createQuestionnaire();\r\n\r\n            expect(response).toEqual(createQuestionnaire);\r\n        });\r\n    });\r\n    describe('getSection', () => {\r\n        it('Should get a section', async () => {\r\n            jest.doMock('../questionnaire/request-service', () =>\r\n                jest.fn(() => ({\r\n                    get: () => getValidSection\r\n                }))\r\n            );\r\n            jest.resetModules();\r\n            // eslint-disable-next-line global-require\r\n            const questionnaireService = require('../questionnaire/questionnaire-service')();\r\n            const response = await questionnaireService.getSection(\r\n                'questionnaire-id',\r\n                'p-some-section'\r\n            );\r\n\r\n            expect(response).toEqual(getValidSection);\r\n        });\r\n    });\r\n    describe('postSection', () => {\r\n        it('Should post a sections answers', async () => {\r\n            jest.doMock('../questionnaire/request-service', () =>\r\n                jest.fn(() => ({\r\n                    post: () => validPostResponse\r\n                }))\r\n            );\r\n            jest.resetModules();\r\n            // eslint-disable-next-line global-require\r\n            const questionnaireService = require('../questionnaire/questionnaire-service')();\r\n            const response = await questionnaireService.postSection(\r\n                'questionnaire-id',\r\n                'p-some-section',\r\n                {answer: true}\r\n            );\r\n\r\n            expect(response).toEqual(validPostResponse);\r\n        });\r\n    });\r\n    describe('getPrevious', () => {\r\n        it('Should get a previous section', async () => {\r\n            jest.doMock('../questionnaire/request-service', () =>\r\n                jest.fn(() => ({\r\n                    get: () => getValidPreviousSection\r\n                }))\r\n            );\r\n            jest.resetModules();\r\n            // eslint-disable-next-line global-require\r\n            const questionnaireService = require('../questionnaire/questionnaire-service')();\r\n            const response = await questionnaireService.getPrevious(\r\n                'questionnaire-id',\r\n                'p-some-section'\r\n            );\r\n\r\n            expect(response).toEqual(getValidPreviousSection);\r\n        });\r\n    });\r\n    describe('getCurrentSection', () => {\r\n        it('Should get the current section', async () => {\r\n            jest.doMock('../questionnaire/request-service', () =>\r\n                jest.fn(() => ({\r\n                    get: () => getValidSection\r\n                }))\r\n            );\r\n            jest.resetModules();\r\n            // eslint-disable-next-line global-require\r\n            const questionnaireService = require('../questionnaire/questionnaire-service')();\r\n            const response = await questionnaireService.getCurrentSection('questionnaire-id');\r\n\r\n            expect(response).toEqual(getValidSection);\r\n        });\r\n    });\r\n    describe('getSubmission', () => {\r\n        it('Should get a submission status', async () => {\r\n            jest.doMock('../questionnaire/request-service', () =>\r\n                jest.fn(() => ({\r\n                    get: () => getValidSubmission\r\n                }))\r\n            );\r\n            jest.resetModules();\r\n            // eslint-disable-next-line global-require\r\n            const questionnaireService = require('../questionnaire/questionnaire-service')();\r\n            const response = await questionnaireService.getSubmission('questionnaire-id');\r\n\r\n            expect(response).toEqual(getValidSubmission);\r\n        });\r\n    });\r\n    describe('postSubmission', () => {\r\n        it('Should post a submission', async () => {\r\n            jest.doMock('../questionnaire/request-service', () =>\r\n                jest.fn(() => ({\r\n                    post: () => postValidSubmission\r\n                }))\r\n            );\r\n            jest.resetModules();\r\n            // eslint-disable-next-line global-require\r\n            const questionnaireService = require('../questionnaire/questionnaire-service')();\r\n            const response = await questionnaireService.postSubmission('questionnaire-id');\r\n\r\n            expect(response).toEqual(postValidSubmission);\r\n        });\r\n    });\r\n    describe('timeout', () => {\r\n        jest.useFakeTimers();\r\n        it('waits a defined number of millisecond before returning', () => {\r\n            // eslint-disable-next-line global-require\r\n            const questionnaireService = require('../questionnaire/questionnaire-service')();\r\n            questionnaireService.timeout(1000);\r\n\r\n            expect(setTimeout).toHaveBeenCalledTimes(1);\r\n            expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 1000);\r\n        });\r\n    });\r\n    describe('getSubmissionStatus', () => {\r\n        it('Returns the status if completed is true', async () => {\r\n            jest.doMock('../questionnaire/request-service', () =>\r\n                jest.fn(() => ({\r\n                    get: () => getValidCompletedSubmission\r\n                }))\r\n            );\r\n            jest.resetModules();\r\n            // eslint-disable-next-line global-require\r\n            const questionnaireService = require('../questionnaire/questionnaire-service')();\r\n            const expected = {\r\n                caseReferenceNumber: null,\r\n                questionnaireId: '2c3c6ecd-aa68-4a00-8093-300cae6cbfcb',\r\n                status: 'COMPLETE',\r\n                submitted: true\r\n            };\r\n            const response = await questionnaireService.getSubmissionStatus(\r\n                'questionnaire-id',\r\n                Date.now()\r\n            );\r\n\r\n            expect(expected).toEqual(response);\r\n        });\r\n        /*  it('Returns continues to check for 15 seconds', async () => {\r\n            jest.useFakeTimers();\r\n            jest.doMock('../questionnaire/request-service', () =>\r\n                jest.fn(() => ({\r\n                    get: () => getValidSubmission\r\n                }))\r\n            );\r\n            jest.resetModules();\r\n            // eslint-disable-next-line global-require\r\n            const questionnaireService = require('../questionnaire/questionnaire-service')();\r\n            await questionnaireService.getSubmissionStatus(\r\n                'questionnaire-id',\r\n                Date.now()\r\n            );\r\n\r\n            expect(setTimeout).toHaveBeenCalledTimes(15);\r\n        });\r\n        it('Should return a 504 error if it is called with a time older than 15 seconds ago.', async () => {\r\n            jest.resetModules();\r\n            // eslint-disable-next-line global-require\r\n            const questionnaireService = require('../questionnaire/questionnaire-service')();\r\n            const response = await questionnaireService.getSubmissionStatus(\r\n                'questionnaire-id',\r\n                Date.now() - 16000\r\n            );\r\n\r\n            expect(response).toThrow('The upstream server took too long to respond');\r\n        }); */\r\n    });\r\n\r\n    describe('getFirstSection', () => {\r\n        it('Should get the first section', async () => {\r\n            jest.doMock('../questionnaire/request-service', () =>\r\n                jest.fn(() => ({\r\n                    get: () => getValidSection\r\n                }))\r\n            );\r\n            jest.resetModules();\r\n            // eslint-disable-next-line global-require\r\n            const questionnaireService = require('../questionnaire/questionnaire-service')();\r\n            const response = await questionnaireService.getFirstSection('questionnaire-id');\r\n\r\n            expect(response).toEqual(getValidSection);\r\n        });\r\n    });\r\n});\r\n","C:\\sjs\\webstacker\\cica-web\\test\\request-service.test.js",[],"C:\\sjs\\webstacker\\cica-web\\test\\routes.test.js",[],"C:\\sjs\\webstacker\\cica-web\\test\\test-fixtures\\schemas\\p-applicant-enter-your-name.js",[],"C:\\sjs\\webstacker\\cica-web\\test\\test-fixtures\\transformations\\p-applicant-british-citizen-or-eu-national.js",[],"C:\\sjs\\webstacker\\cica-web\\test\\test-fixtures\\transformations\\resolved html\\p-applicant-british-citizen-or-eu-national.js",[],"C:\\sjs\\webstacker\\cica-web\\test\\test-fixtures\\transformations\\resolved html\\p-some-section.js",[],"C:\\sjs\\webstacker\\cica-web\\webpack.config.js",[],"C:\\sjs\\webstacker\\cica-web\\webpack.config.prod.js",[],{"ruleId":"113","severity":1,"message":"114","line":162,"column":9,"nodeType":"115","messageId":"116","endLine":189,"endColumn":15},"jest/no-commented-out-tests","Some tests seem to be commented","Block","commentedTests"]